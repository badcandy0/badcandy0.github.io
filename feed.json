{
    "version": "https://jsonfeed.org/version/1",
    "title": "lllll",
    "subtitle": "",
    "icon": "http://badcandy0.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "http://badcandy0.github.io",
    "items": [
        {
            "id": "http://badcandy0.github.io/2023/08/05/%E5%8D%8E%E4%B8%BAod-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F%EF%BC%88JS%EF%BC%89/",
            "url": "http://badcandy0.github.io/2023/08/05/%E5%8D%8E%E4%B8%BAod-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F%EF%BC%88JS%EF%BC%89/",
            "title": "华为od机试-文件目录大小（js）",
            "date_published": "2023-08-05T15:23:53.106Z",
            "content_html": "<blockquote>\n<p>我是用本地 node 环境调试的，故此需要使用 readline 模块。</p>\n</blockquote>\n<p>一个文件目录的数据格式为：目录 id，本目录中文件大小，(子目录 id 列表) 其中目录 id 全局唯一，取值范围 [1,200]，本目录中文件大小范围 [1,1000]，子目录 id 列表个数 [0,10]<br />\n 例如 : 1 20 (2,3) 表示目录 1 中文件总大小是 20，有两人子目录，id 分别是 2 和 3<br />\n 现在输入一个文件系统中所有日录信息，以及待查询的目录 id，返回这个目录和及该目录所有子目录的大小之和<br />\n<strong>输入描述</strong><br />\n第一行为两个数字 M，N，分别表示目录的个数和待查询的目录 id.<br />\n1≤M≤100<br />\n1≤N≤200<br />\n 接下来 M 行，每行为 1 个目录的数据<br />\n目录 id 本目录中文件大小 (子目录 id 列表)<br />\n 子目录列表中的子目录 id 以逗号分隔<br />\n<strong>输出描述</strong><br />\n待查询目录及其子目录的大小之和</p>\n<h1 id=\"引入需要的模块如下\"><a class=\"anchor\" href=\"#引入需要的模块如下\">#</a> 引入需要的模块如下：</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"获取输入次数和查询id\"><a class=\"anchor\" href=\"#获取输入次数和查询id\">#</a> 获取输入次数和查询 ID：</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rl<span class=\"token punctuation\">.</span><span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入输入数据的次数和要查询的ID，用空格隔开：\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>inputCount<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  totalInputs <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  queryId <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  rl<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"逐行获取用户的输入\"><a class=\"anchor\" href=\"#逐行获取用户的输入\">#</a> 逐行获取用户的输入：</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\((.*?)\\)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// console.log(\"d: \" , d.length)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    inputsReceived<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputsReceived <span class=\"token operator\">===</span> totalInputs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      rl<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"用递归来计算总文件的大小\"><a class=\"anchor\" href=\"#用递归来计算总文件的大小\">#</a> 用递归来计算总文件的大小：</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">计算总文件大小</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> queryId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> childrenIds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> queryId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            totalSize <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            childrenIds<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>item<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenIds<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childrenIds<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> totalSize <span class=\"token operator\">+=</span> <span class=\"token function\">计算总文件大小</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> childrenIds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> totalSize</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"完整代码如下\"><a class=\"anchor\" href=\"#完整代码如下\">#</a> 完整代码如下：</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> totalInputs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入的数据的行数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> queryId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要查询的 id</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> inputsReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 已经输入的行数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span>  totalSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总文件大小占位符</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 获取输入次数和查询 ID</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>rl<span class=\"token punctuation\">.</span><span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入输入数据的次数和要查询的ID，用空格隔开：\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>inputCount<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  totalInputs <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  queryId <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  rl<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>rl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\((.*?)\\)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// console.log(\"d: \" , d.length)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    inputsReceived<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputsReceived <span class=\"token operator\">===</span> totalInputs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      rl<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">计算总文件大小</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> queryId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">const</span> childrenIds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> queryId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            totalSize <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            childrenIds<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>item<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenIds<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childrenIds<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">return</span> totalSize <span class=\"token operator\">+=</span> <span class=\"token function\">计算总文件大小</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> childrenIds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> totalSize</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>rl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总文件大小为：\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">计算总文件大小</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> queryId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "华为od",
                "node",
                "javascript",
                "node",
                "javascript",
                "华为od"
            ]
        },
        {
            "id": "http://badcandy0.github.io/2023/07/04/Promise/",
            "url": "http://badcandy0.github.io/2023/07/04/Promise/",
            "title": "什么是Promise",
            "date_published": "2023-07-04T07:03:28.535Z",
            "content_html": "<h1 id=\"什么是promise\"><a class=\"anchor\" href=\"#什么是promise\">#</a> 什么是 promise</h1>\n<p><strong>Promise 是 JS 中进行异步编程的新的解决方案</strong></p>\n<ul>\n<li><code>promise</code>  是一个构造函数</li>\n<li><code>promise</code>  的构造函数接收一个函数作为参数，并且接收两个参数 <code>resolve</code> ， <code>reject</code> ，分别代表异步操作执行成功后的回调函数和异步操作执行失败后的回调函数</li>\n</ul>\n<p>优点：</p>\n<ol>\n<li>指定回调函数的方法更加灵活</li>\n<li>支持链式调用 ，可以解决回调函数问题</li>\n</ol>\n<p>状态改变：<br />\n只有两种，并且每个 promise 对象只能改变一次</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pending <span class=\"token operator\">--</span><span class=\"token operator\">></span>  resolved  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[成功后调用]</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pending <span class=\"token operator\">--</span><span class=\"token operator\">></span>  rejected  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[失败后调用]</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p><strong>无论变为成功还是失败，都会且只有一个结果数据</strong><br />\n成功的结果数据一般称为 <code>value(val)</code> , 失败的结果数据一般称为  <code>reason(res)</code></p>\n<h1 id=\"流程控制图\"><a class=\"anchor\" href=\"#流程控制图\">#</a> 流程控制图</h1>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2023/png/34100937/1680510957112-53453e28-739b-4ac7-b420-8a41b1b23f73.png#averageHue=%23fdfdfc&amp;clientId=ufd72046f-2026-4&amp;from=paste&amp;height=199&amp;id=u0a9ac05c&amp;originHeight=281&amp;originWidth=1073&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=103226&amp;status=done&amp;style=none&amp;taskId=u3c9ad263-5245-40bd-b0a9-cfe92fa68e2&amp;title=&amp;width=759\" alt=\"image.png\" /></p>\n<h1 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h1>\n<h2 id=\"基础定义\"><a class=\"anchor\" href=\"#基础定义\">#</a> 基础定义</h2>\n<p>Promise 构造函数:  <code>Promise (excutor) &#123;&#125;</code> <br />\n excutor 函数: <strong>同步执行</strong> <code>(resolve, reject) =&gt; &#123;&#125;</code> <br />\n resolve 函数: <strong>内部定义成功时我们调用的函数</strong> <code>value =&gt; &#123;&#125;</code> <br />\n reject 函数: <strong>内部定义失败时我们调用的函数</strong> <code>reason =&gt; &#123;&#125;</code></p>\n<blockquote>\n<p>说明: excutor 会在 Promise 内部立即同步回调，异步操作在执行器中执行</p>\n</blockquote>\n<h2 id=\"promiseprototypethen\"><a class=\"anchor\" href=\"#promiseprototypethen\">#</a> Promise.prototype.then</h2>\n<p>.then () 方法用来<strong>预先指定成功和失败的回调函数</strong>，调用 .then () 方法时，成功的回调函数是<strong>必选</strong>的，失败的回调函数是可选的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> Promise.prototype.then(onResolved, onRejected) => &#123;&#125;</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>onResolved 函数<span class=\"token operator\">:</span> <span class=\"token function\">成功的回调函数</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>onRejected 函数<span class=\"token operator\">:</span> <span class=\"token function\">失败的回调函数</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同一个 Promise 实例可以调用多个 <code>then</code>  方法，当 Promise 中 <code>resolve</code>  被回调时，所有 then 方法传入的回调函数都会被调用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 同时调用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>回调函数可以有返回值<br />\n如果返回的是普通值，那么这个普通值将作为一个新的 Promise 的 <code>resolve</code>  的值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'then'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 打印 then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//promise.then (() => 'then') 相当于</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果返回的是 Promise，那么就可以再次调用 <code>then</code>  方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 2 秒后打印 success</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果返回的是一个对象，并且该对象实现了 thenable，该 then 函数有两个参数 <code>resolve</code> 、 <code>reject</code> ，则 resolve 的将会传递给下一个 Promise。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印 success</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"promiseprototypecatch\"><a class=\"anchor\" href=\"#promiseprototypecatch\">#</a> Promise.prototype.catch</h2>\n<p>.catch () 方法用来<strong>捕获与处理错误</strong> ，相当于 <strong>then(undefined, onRejected)</strong>;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Promise.prototype.catch(onRejected) => &#123;&#125; </span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>onRejected 函数<span class=\"token operator\">:</span> <span class=\"token function\">失败的回调函数</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>catch 方法也会返回一个 Promise 实例，返回值的情况：</p>\n<ul>\n<li>普通值，将作为 resolve 的参数</li>\n</ul>\n<h2 id=\"promiseresolve\"><a class=\"anchor\" href=\"#promiseresolve\">#</a> Promise.resolve</h2>\n<p>返回一个 <strong>成功 / 失败</strong> 的 promise 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Promise.resolve(value) => &#123;&#125;</span><span class=\"token template-punctuation string\">`</span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> 成功的数据或 promise 对象</pre></td></tr></table></figure><h2 id=\"promisereject\"><a class=\"anchor\" href=\"#promisereject\">#</a> Promise.reject</h2>\n<p>返回一个 <strong>失败</strong> 的 promise 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Promise.reject(reason) => &#123;&#125; </span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">reason</span><span class=\"token operator\">:</span> 失败的原因</pre></td></tr></table></figure><h2 id=\"promiseall\"><a class=\"anchor\" href=\"#promiseall\">#</a> Promise.all</h2>\n<p>只有所有的 promise 都成功才成功，只要有一个失败了就直接失败；<br />\n返回一个新的 promise（成功的时候返回的是一个结果数组，而失败的时候则返回最先被 reject 失败状态的值）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Promise.all(promises) => &#123;&#125; </span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">promises</span><span class=\"token operator\">:</span> 包含 n 个 promise 的数组</pre></td></tr></table></figure><h2 id=\"promiserace\"><a class=\"anchor\" href=\"#promiserace\">#</a> Promise.race</h2>\n<p>第一个完成的 promise 就是最终的结果状态；返回一个新的 promise</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Promise.race(promises) => &#123;&#125; </span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">promises</span><span class=\"token operator\">:</span> 包含 n 个 promise 的数组</pre></td></tr></table></figure><h2 id=\"promisefinally\"><a class=\"anchor\" href=\"#promisefinally\">#</a> Promise.finally</h2>\n<p>finally 是 ES9 (ES2018) 新增的一个特性，无论一个 Promise 实例是 <code>fulfilled</code>  或 <code>rejected</code> ， <code>finally</code>  都会执行。<br />\nfinally 不接收参数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'res:'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally code execute'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"promise的关键问题\"><a class=\"anchor\" href=\"#promise的关键问题\">#</a> Promise 的关键问题</h1>\n<h2 id=\"如何改变promise的状态\"><a class=\"anchor\" href=\"#如何改变promise的状态\">#</a> 如何改变 promise 的状态</h2>\n<ol>\n<li>resolve (value): 如果当前是 pendding 就会变为 resolved</li>\n<li>reject (reason): 如果当前是 pendding 就会变为 rejected</li>\n<li>抛出异常：如果当前是 pendding 就会变为 rejected</li>\n</ol>\n<h2 id=\"一个-promise-指定多个成功失败回调函数-都会调用吗\"><a class=\"anchor\" href=\"#一个-promise-指定多个成功失败回调函数-都会调用吗\">#</a> 一个 promise 指定多个成功 / 失败回调函数，都会调用吗？</h2>\n<p>当 promise 改变为对应状态时都会调用</p>\n<h2 id=\"改变promise状态的函数优先级\"><a class=\"anchor\" href=\"#改变promise状态的函数优先级\">#</a> 改变 promise 状态的函数优先级</h2>\n<ol>\n<li>都有可能，正常情况下是先指定回调再改变状态，但也可以先改状态再指定回调</li>\n<li>如何先改状态再指定回调？</li>\n</ol>\n<ul>\n<li>在执行器中直接调用 resolve ()/reject ()</li>\n<li>延迟更长时间才调用 then ()</li>\n</ul>\n<ol>\n<li>什么时候才能得到数据？</li>\n</ol>\n<ul>\n<li>如果先指定的回调，那当状态发生改变时，回调函数就会调用，得到数据</li>\n<li>如果先改变的状态，那当指定回调时，回调函数就会调用，得到数据</li>\n</ul>\n<h2 id=\"promisethen-返回的新-promise-的结果状态由什么决定\"><a class=\"anchor\" href=\"#promisethen-返回的新-promise-的结果状态由什么决定\">#</a> promise.then () 返回的新 promise 的结果状态由什么决定？</h2>\n<ol>\n<li>简单表达：由 then () 指定的回调函数执行的结果决定</li>\n<li>详细表达:</li>\n</ol>\n<ul>\n<li>如果抛出异常，新 promise 变为 rejected, reason 为抛出的异常</li>\n<li>如果返回的是非 promise 的任意值，新 promise 变为 resolved, value 为返回的值</li>\n<li>如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</li>\n</ul>\n<h2 id=\"promise-如何串连多个操作任务\"><a class=\"anchor\" href=\"#promise-如何串连多个操作任务\">#</a> promise 如何串连多个操作任务？</h2>\n<ol>\n<li>promise 的 then () 返回一个新的 promise, 可以开成 then () 的链式调用</li>\n<li>通过 then 的链式调用串连多个同步 / 异步任务</li>\n</ol>\n<h2 id=\"promise-异常传透\"><a class=\"anchor\" href=\"#promise-异常传透\">#</a> promise 异常传透？</h2>\n<ol>\n<li>当使用 promise 的 then 链式调用时，可以在最后指定失败的回调，</li>\n<li>前面任何操作出了异常，都会传到最后失败的回调中处理</li>\n</ol>\n<h2 id=\"中断-promise-链\"><a class=\"anchor\" href=\"#中断-promise-链\">#</a> 中断 promise 链？</h2>\n<ol>\n<li>当使用 promise 的 then 链式调用时，在中间中断，不再调用后面的回调函数</li>\n<li>办法：在回调函数中返回一个 pendding 状态的 promise 对象</li>\n</ol>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<ul>\n<li>Promise 是 JS 中进行异步编程的新的解决方案</li>\n<li>new 出来的 Promise 实例对象，代表一个 <strong>异步操作</strong></li>\n<li>每一次 new Promise () 构造函数得到的实例对象，都可以<strong>通过原型链</strong>的方法访问到.then 方法</li>\n<li>一个 promise 对象只能改变一次 ，一般为 padding 转为 resolved 或 padding 转为 rejected</li>\n</ul>\n",
            "tags": [
                "promise",
                "web前端"
            ]
        },
        {
            "id": "http://badcandy0.github.io/2023/07/03/webSocket/",
            "url": "http://badcandy0.github.io/2023/07/03/webSocket/",
            "title": "什么是websocket",
            "date_published": "2023-07-03T14:26:15.640Z",
            "content_html": "<h1 id=\"什么是websocket\"><a class=\"anchor\" href=\"#什么是websocket\">#</a> 什么是 websocket</h1>\n<p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议。WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。<br />\n在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。（维基百科）<br />\nWebSocket 本质上一种计算机网络应用层的协议，用来弥补 http 协议在持久通信能力上的不足。<br />\nWebSocket 协议在 2008 年诞生，2011 年成为国际标准。现在最新版本浏览器都已经支持了。<br />\n它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZW4ud2lraXBlZGlhLm9yZyUyRndpa2klMkZQdXNoX3RlY2hub2xvZ3k=\">服务器推送技术</span>的一种。<br />\nWebSocket 的其他特点包括：<br />\n（1）建立在 TCP 协议之上，服务器端的实现比较容易。<br />\n（2）与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。<br />\n（3）数据格式比较轻量，性能开销小，通信高效。<br />\n（4）可以发送文本，也可以发送二进制数据。<br />\n（5）没有同源限制，客户端可以与任意服务器通信。<br />\n（6）协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">ws</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>some<span class=\"token operator\">/</span>path</pre></td></tr></table></figure><p><img data-src=\"https://cdn.nlark.com/yuque/0/2023/png/34100937/1680747726512-3bd64b4b-017e-41a6-a6f1-18c5d0c62161.png#averageHue=%23ead2bc&amp;clientId=u417c516c-6efd-4&amp;from=paste&amp;height=467&amp;id=u1b13a572&amp;originHeight=312&amp;originWidth=418&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=91815&amp;status=done&amp;style=none&amp;taskId=u945ad9cd-9626-4a89-a714-e26fda34b05&amp;title=&amp;width=626\" alt=\"image.png\" /></p>\n<h2 id=\"为什么需要-websocket\"><a class=\"anchor\" href=\"#为什么需要-websocket\">#</a> 为什么需要 WebSocket？</h2>\n<p>我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？<br />\n因为 HTTP 协议有一个缺陷：通信只能由客户端发起，不具备服务器推送能力。<br />\n举例来说，我们想了解查询今天的实时数据，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。<br />\n<img data-src=\"https://cdn.nlark.com/yuque/0/2023/png/34100937/1680747765516-572cbd3a-965f-4afc-9f42-5c4a531af057.png#averageHue=%23c5b8a4&amp;clientId=u417c516c-6efd-4&amp;from=paste&amp;height=479&amp;id=u5f988d12&amp;originHeight=479&amp;originWidth=638&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=105900&amp;status=done&amp;style=none&amp;taskId=ubb07dbc4-b7e0-4f7c-85a5-e37540b2ed6&amp;title=&amp;width=638\" alt=\"image.png\" /><br />\n 这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cucHVibnViLmNvbSUyRmJsb2clMkYyMDE0LTEyLTAxLWh0dHAtbG9uZy1wb2xsaW5nJTJG\"> &quot;轮询&quot;</span>：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。<br />\n在 WebSocket 协议出现以前，创建一个和服务端进双通道通信的 web 应用，需要依赖 HTTP 协议，进行不停的轮询，这会导致一些问题：</p>\n<ul>\n<li>服务端被迫维持来自每个客户端的大量不同的连接</li>\n<li>大量的轮询请求会造成高开销，比如会带上多余的 header，造成了无用的数据传输。</li>\n</ul>\n<p>http 协议本身是没有持久通信能力的，但是我们在实际的应用中，是很需要这种能力的，所以，为了解决这些问题，WebSocket 协议由此而生，于 2011 年被 IETF 定为标准 RFC6455，并被 RFC7936 所补充规范。<br />\n并且在 HTML5 标准中增加了有关 WebSocket 协议的相关 api，所以只要实现了 HTML5 标准的客户端，就可以与支持 WebSocket 协议的服务器进行全双工的持久通信了。</p>\n<h2 id=\"websocket-与-http-的区别\"><a class=\"anchor\" href=\"#websocket-与-http-的区别\">#</a> WebSocket 与 HTTP 的区别</h2>\n<p>WebSocket 与 HTTP 的关系图：<br />\n<img data-src=\"https://cdn.nlark.com/yuque/0/2023/png/34100937/1680748375856-c3ec39b7-4c1f-462b-93ac-3fef37badfd5.png#averageHue=%23fafdfa&amp;clientId=u417c516c-6efd-4&amp;from=paste&amp;height=346&amp;id=ud425a0e9&amp;originHeight=250&amp;originWidth=555&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=56762&amp;status=done&amp;style=none&amp;taskId=ua462056f-7c80-4c13-b0d2-cac8ae70e09&amp;title=&amp;width=767.5\" alt=\"image.png\" /><br />\n<strong> 相同点：</strong> 都是一样基于 TCP 的，都是可靠性传输协议。都是应用层协议。<br />\n<strong>联系：</strong> WebSocket 在建立握手时，数据是通过 HTTP 传输的。但是建立之后，在真正传输时候是不需要 HTTP 协议的。<br />\n下面一张图说明了 HTTP 与 WebSocket 的主要区别：<br />\n<img data-src=\"https://cdn.nlark.com/yuque/0/2023/png/34100937/1680748407050-7ed47508-2126-4549-9e8f-03bdbbb7453a.png#averageHue=%2355adc4&amp;clientId=u417c516c-6efd-4&amp;from=paste&amp;height=577&amp;id=u808e404f&amp;originHeight=511&amp;originWidth=628&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=178716&amp;status=done&amp;style=none&amp;taskId=ue56c9d06-6b3b-4b7b-94ea-0d8c2b932f5&amp;title=&amp;width=709\" alt=\"image.png\" /><br />\n1、WebSocket 是双向通信协议，模拟 Socket 协议，可以双向发送或接受信息，而 HTTP 是单向的；<br />\n2、WebSocket 是需要浏览器和服务器握手进行建立连接的，而 http 是浏览器发起向服务器的连接。<br />\n注意：虽然 HTTP/2 也具备服务器推送功能，但 HTTP/2 只能推送静态资源，无法推送指定的信息。</p>\n<h1 id=\"websocket协议的原理\"><a class=\"anchor\" href=\"#websocket协议的原理\">#</a> WebSocket 协议的原理</h1>\n<p>与 http 协议一样，WebSocket 协议也需要通过已建立的 TCP 连接来传输数据。具体实现上是通过 http 协议建立通道，然后在此基础上用真正的 WebSocket 协议进行通信，所以 WebSocket 协议和 http 协议是有一定的交叉关系的。<br />\n首先，WebSocket 是一个持久化的协议，相对于 HTTP 这种非持久的协议来说。简单的举个例子吧，用目前应用比较广泛的 PHP 生命周期来解释。<br />\nHTTP 的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次 HTTP 请求就结束了。<br />\n在 HTTP1.1 中进行了改进，使得有一个 keep-alive，也就是说，在一个 HTTP 连接中，可以发送多个 Request，接收多个 Response。但是请记住 Request = Response， 在 HTTP 中永远是这样，也就是说一个 Request 只能有一个 Response。而且这个 Response 也是被动的，不能主动发起。<br />\n首先 WebSocket 是基于 HTTP 协议的，或者说借用了 HTTP 协议来完成一部分握手。<br />\n首先我们来看个典型的 WebSocket 握手</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>chat <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">Host</span><span class=\"token operator\">:</span> server<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">Upgrade</span><span class=\"token operator\">:</span> websocket</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token literal-property property\">Connection</span><span class=\"token operator\">:</span> Upgrade</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Key<span class=\"token operator\">:</span> x3JJHMbDL1EzLkh9GBhXDw<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Protocol<span class=\"token operator\">:</span> chat<span class=\"token punctuation\">,</span> superchat</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Version<span class=\"token operator\">:</span> <span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token literal-property property\">Origin</span><span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>com</pre></td></tr></table></figure><p>熟悉 HTTP 的童鞋可能发现了，这段类似 HTTP 协议的握手请求中，多了这么几个东西。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">Upgrade</span><span class=\"token operator\">:</span> websocket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">Connection</span><span class=\"token operator\">:</span> Upgrade</pre></td></tr></table></figure><p>这个就是 WebSocket 的核心了，告诉 Apache 、 Nginx 等服务器：注意啦，我发起的请求要用 WebSocket 协议，快点帮我找到对应的助理处理～而不是那个老土的 HTTP。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Key<span class=\"token operator\">:</span> x3JJHMbDL1EzLkh9GBhXDw<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Protocol<span class=\"token operator\">:</span> chat<span class=\"token punctuation\">,</span> superchat</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Version<span class=\"token operator\">:</span> <span class=\"token number\">13</span></pre></td></tr></table></figure><p>首先， Sec-WebSocket-Key 是一个 Base64 encode 的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠我，我要验证你是不是真的是 WebSocket 助理。<br />\n然后， Sec_WebSocket-Protocol 是一个用户定义的字符串，用来区分同 URL 下，不同的服务所需要的协议。简单理解：今晚我要服务 A，别搞错啦～<br />\n 最后， Sec-WebSocket-Version 是告诉服务器所使用的 WebSocket Draft （协议版本），在最初的时候，WebSocket 协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么 Firefox 和 Chrome 用的不是一个版本之类的，当初 WebSocket 协议太多可是一个大难题。。不过现在还好，已经定下来啦～大家都使用同一个版本： 服务员，我要的是 13 岁的噢→_→<br />\n然后服务器会返回下列东西，表示已经接受到请求， 成功建立 WebSocket 啦！</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">101</span> Switching Protocols</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">Upgrade</span><span class=\"token operator\">:</span> websocket</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">Connection</span><span class=\"token operator\">:</span> Upgrade</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Accept<span class=\"token operator\">:</span> HSmrc0sMlYUkAGmm5OPpG2HaGWk<span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Sec<span class=\"token operator\">-</span>WebSocket<span class=\"token operator\">-</span>Protocol<span class=\"token operator\">:</span> chat</pre></td></tr></table></figure><p>这里开始就是 HTTP 最后负责的区域了，告诉客户，我已经成功切换协议啦～</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">Upgrade</span><span class=\"token operator\">:</span> websocket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">Connection</span><span class=\"token operator\">:</span> Upgrade</pre></td></tr></table></figure><p>依然是固定的，告诉客户端即将升级的是 WebSocket 协议，而不是 mozillasocket，lurnarsocket 或者 shitsocket。<br />\n然后， Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key 。 服务器：好啦好啦，知道啦，给你看我的 ID CARD 来证明行了吧。<br />\n后面的， Sec-WebSocket-Protocol 则是表示最终使用的协议。<br />\n至此，HTTP 已经完成它所有工作了，接下来就是完全按照 WebSocket 协议进行了。<br />\n总结，<strong>WebSocket 连接的过程是：</strong></p>\n<ul>\n<li>首先，客户端发起 http 请求，经过 3 次握手后，建立起 TCP 连接；http 请求里存放 WebSocket 支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version 等；</li>\n<li>然后，服务器收到客户端的握手请求后，同样采用 HTTP 协议回馈数据；</li>\n<li>最后，客户端收到连接成功的消息后，开始借助于 TCP 传输信道进行全双工通信。</li>\n</ul>\n<h1 id=\"websocket的优缺点\"><a class=\"anchor\" href=\"#websocket的优缺点\">#</a> Websocket 的优缺点</h1>\n<p><strong>优点：</strong></p>\n<ul>\n<li>WebSocket 协议一旦建议后，互相沟通所消耗的请求头是很小的</li>\n<li>服务器可以向客户端推送消息了</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>少部分浏览器不支持，浏览器支持的程度与方式有区别（IE10）</li>\n</ul>\n<h1 id=\"websocket应用场景\"><a class=\"anchor\" href=\"#websocket应用场景\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGbGluay56aGlodS5jb20lMkYlM0Z0YXJnZXQlM0RodHRwcyUyNTNBJTJGJTJGd3d3LnFjbG91ZC5jb20lMkZjb21tdW5pdHklMkZhcnRpY2xlJTJGMTY0ODE2MDAxNDgxMDExODI2JTI1M0Zmcm9tU291cmNlJTI1M0Rnd3pjdy45MzQwNi45MzQwNi45MzQwNg==\">WebSocket 应用场景</span></h1>\n<ul>\n<li>即时聊天通信</li>\n<li>多玩家游戏</li>\n<li>在线协同编辑 / 编辑</li>\n<li>实时数据流的拉取与推送</li>\n<li>体育 / 游戏实况</li>\n<li>实时地图位置</li>\n<li>即时 Web 应用程序：即时 Web 应用程序使用一个 Web 套接字在客户端显示数据，这些数据由后端服务器连续发送。在 WebSocket 中，数据被连续推送 / 传输到已经打开的同一连接中，这就是为什么 WebSocket 更快并提高了应用程序性能的原因。 例如在交易网站或比特币交易中，这是最不稳定的事情，它用于显示价格波动，数据被后端服务器使用 Web 套接字通道连续推送到客户端。</li>\n<li>游戏应用程序：在游戏应用程序中，你可能会注意到，服务器会持续接收数据，而不会刷新用户界面。屏幕上的用户界面会自动刷新，而且不需要建立新的连接，因此在 WebSocket 游戏应用程序中非常有帮助。</li>\n<li>聊天应用程序：聊天应用程序仅使用 WebSocket 建立一次连接，便能在订阅户之间交换，发布和广播消息。它重复使用相同的 WebSocket 连接，用于发送和接收消息以及一对一的消息传输。</li>\n</ul>\n<h2 id=\"不能使用wbesocket的场景\"><a class=\"anchor\" href=\"#不能使用wbesocket的场景\">#</a> 不能使用 wbesocket 的场景</h2>\n<p>如果我们需要通过网络传输的任何实时更新或连续数据流，则可以使用 WebSocket。如果我们要获取旧数据，或者只想获取一次数据供应用程序使用，则应该使用 HTTP 协议，不需要很频繁或仅获取一次的数据可以通过简单的 HTTP 请求查询，因此在这种情况下最好不要使用 WebSocket。<br />\n注意：如果仅加载一次数据，则 RESTful Web 服务足以从服务器获取数据。</p>\n<h1 id=\"websocket-断线重连\"><a class=\"anchor\" href=\"#websocket-断线重连\">#</a> websocket 断线重连</h1>\n<h2 id=\"如何判断在线离线\"><a class=\"anchor\" href=\"#如何判断在线离线\">#</a> 如何判断在线离线？</h2>\n<p>当客户端第一次发送请求至服务端时会携带唯一标识、以及时间戳，服务端到 db 或者缓存去查询改请求的唯一标识，如果不存在就存入 db 或者缓存中，<br />\n第二次客户端定时再次发送请求依旧携带唯一标识、以及时间戳，服务端到 db 或者缓存去查询改请求的唯一标识，如果存在就把上次的时间戳拿取出来，使用当前时间戳减去上次的时间，<br />\n得出的毫秒秒数判断是否大于指定的时间，若小于的话就是在线，否则就是离线；</p>\n<h2 id=\"如何解决断线问题\"><a class=\"anchor\" href=\"#如何解决断线问题\">#</a> 如何解决断线问题</h2>\n<p>通过查阅资料了解到 nginx 代理的 websocket 转发，无消息连接会出现超时断开问题。网上资料提到解决方案两种，一种是修改 nginx 配置信息，第二种是 websocket 发送心跳包。<br />\n下面就来总结一下本次项目实践中解决的 websocket 的断线 和 重连 这两个问题的解决方案。<br />\n主动触发包括主动断开连接，客户端主动发送消息给后端</p>\n<ol>\n<li>主动断开连接</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主动断开连接，根据需要使用，基本很少用到。</p>\n<ol start=\"2\">\n<li>主动发送消息</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>针对 websocket 断线我们来分析一下，</p>\n<ul>\n<li>断线的可能原因 1：websocket 超时没有消息自动断开连接，应对措施：这时候我们就需要知道服务端设置的超时时长是多少，在小于超时时间内发送心跳包，有 2 中方案：一种是客户端主动发送上行心跳包，另一种方案是服务端主动发送下行心跳包。下面主要讲一下客户端也就是前端如何实现心跳包：首先了解一下心跳包机制跳包之所以叫心跳包是因为：它像心跳一样每隔固定时间发一次，以此来告诉服务器，这个客户端还活着。事实上这是为了保持长连接，至于这个包的内容，是没有什么特别规定的，不过一般都是很小的包，或者只包含包头的一个空包。在 TCP 的机制里面，本身是存在有心跳包的机制的，也就是 TCP 的选项：SO_KEEPALIVE。系统默认是设置的 2 小时的心跳频率。但是它检查不到机器断电、网线拔出、防火墙这些断线。而且逻辑层处理断线可能也不是那么好处理。一般，如果只是用于保活还是可以的。心跳包一般来说都是在逻辑层发送空的 echo 包来实现的。下一个定时器，在一定时间间隔下发送一个空包给客户端，然后客户端反馈一个同样的空包回来，服务器如果在一定时间内收不到客户端发送过来的反馈包，那就只有认定说掉线了。在长连接下，有可能很长一段时间都没有数据往来。理论上说，这个连接是一直保持连接的，但是实际情况中，如果中间节点出现什么故障是难以知道的。更要命的是，有的节点 (防火墙) 会自动把一定时间之内没有数据交互的连接给断掉。在这个时候，就需要我们的心跳包了，用于维持长连接，保活。</li>\n</ul>\n<p>心跳检测步骤：</p>\n<ol>\n<li>客户端每隔一个时间间隔发生一个探测包给服务器</li>\n<li>客户端发包时启动一个超时定时器</li>\n<li>服务器端接收到检测包，应该回应一个包</li>\n<li>如果客户机收到服务器的应答包，则说明服务器正常，删除超时定时器</li>\n<li>如果客户端的超时定时器超时，依然没有收到应答包，则说明服务器挂了</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 前端解决方案：心跳检测</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> heartCheck <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//30 秒发一次心跳</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">timeoutObj</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">serverTimeoutObj</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">reset</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeoutObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverTimeoutObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">start</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeoutObj <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 这里发送一个心跳，后端收到后，返回一个心跳消息，</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">//onmessage 拿到返回的心跳就说明连接正常</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            self<span class=\"token punctuation\">.</span>serverTimeoutObj <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果超过一定时间还没重置，说明后端主动断开了</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果 onclose 会执行 reconnect，我们执行 ws.close () 就行了。如果直接执行 reconnect 会触发 onclose 导致重连两次</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>断线的可能原因 2：websocket 异常包括服务端出现中断，交互切屏等等客户端异常中断等等</li>\n</ul>\n<p>当若服务端宕机了，客户端怎么做、服务端再次上线时怎么做？<br />\n客户端则需要断开连接，通过 onclose 关闭连接，服务端再次上线时则需要清除之间存的数据，若不清除 则会造成只要请求到服务端的都会被视为离线。<br />\n针对这种异常的中断解决方案就是处理重连，下面我们给出的重连方案是使用 js 库处理：引入 reconnecting-websocket.min.js，ws 建立链接方法使用 js 库 api 方法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReconnectingWebSocket</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 断线重连：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">reconnectSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReconnectingWebSocket</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'MozWebSocket'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MozWebSocket</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SockJS</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>断网监测支持使用 js 库：offline.min.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">onLineCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Offline<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Offline<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span><span class=\"token string\">'---Offline.state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>socketStatus<span class=\"token punctuation\">,</span><span class=\"token string\">'---this.socketStatus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>socketStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'网络连接已断开！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Offline<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">'up'</span> <span class=\"token operator\">&amp;&amp;</span> websocket<span class=\"token punctuation\">.</span>reconnectAttempts <span class=\"token operator\">></span> websocket<span class=\"token punctuation\">.</span>maxReconnectInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">reconnectSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'网络连接成功！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        websocket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heartBeat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 使用：在 websocket 断开链接时调用网络中断监测</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>websocket<span class=\"token punctuation\">.</span><span class=\"token parameter\">onclose</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">onLineCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<ul>\n<li>WebSocket 是为了在 web 应用上进行双通道通信而产生的协议，相比于轮询 HTTP 请求的方式，WebSocket 有节省服务器资源，效率高等优点。</li>\n<li>WebSocket 中的掩码是为了防止早期版本中存在中间缓存污染攻击等问题而设置的，客户端向服务端发送数据需要掩码，服务端向客户端发送数据不需要掩码。</li>\n<li>WebSocket 中 Sec-WebSocket-Key 的生成算法是拼接服务端和客户端生成的字符串，进行 SHA1 哈希算法，再用 base64 编码。</li>\n<li>WebSocket 协议握手是依靠 HTTP 协议的，依靠于 HTTP 响应 101 进行协议升级转换。</li>\n</ul>\n",
            "tags": [
                "web前端",
                "websocket"
            ]
        }
    ]
}